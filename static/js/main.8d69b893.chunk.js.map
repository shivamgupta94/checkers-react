{"version":3,"sources":["_store/board/actionTypes.js","Pawn/Pawn.js","_store/board/actions.js","Cell/Cell.js","_store/board/reducer.js","Row/Row.js","Board/Board.js","Game/Game.js","serviceWorker.js","index.js"],"names":["HOVER_CELL","ON_MOUSE_LEAVE","STORE_STYLES","SET_ITEM","PLAY_AI_TURN","NEW_GAME","Pawn","children","rowIndex","style","cellIndex","data","context","activePlayer","useDrag","item","r","c","d","type","end","monitor","dropResult","getDropResult","props","dispatch","types","boardActions","drag","ref","width","height","margin","borderRadius","cursor","position","backgroundColor","zIndex","opacity","Cell","cellData","cellStyles","onMouseOver","board","onMouseLeave","useDrop","accept","drop","name","hasPawn","String","className","initialState","time","highlightedMoves","styles","gameEnd","moves","reduce","state","action","getCellStyles","stylesC","validMoves","highlightValidMovesForPiece","forEach","styles_leave","highlightedMovesArray","getBackgroundColor","clearHighlightedCells","ai_pawns","pastBoard","row","cell","possibleMove","length","push","randomSelectedAIPawn","Math","floor","random","undefined","randomSelectedAIMove","index","hasMoveAvailable","calculateStyles","activeNew","new_styles_new","oldBoard","found","find","rowindex","color","getColor","getOpacity","getCursor","direction","leftAndRight","jumpMoves","jump","dir","hor","isOnBoardAndValid","jumpLookup","wouldDelete","horizontal","odldata","newR","newC","jumping","filter","value","arr","xy","Object","keys","getBoardState","getGameEndStatus","hasRed","hasBlack","getActivePlayer","getMoves","getCount","count","Row","this","rowData","map","key","Component","connect","boardSelector","Board","Game","timer","counter","formatSeconds","sec","hrs","min","seconds","result","round","tick","setState","setInterval","clearInterval","nextProps","gameEndStatus","backend","HTML5Backend","float","onClick","aiPawnCount","yourPawnCount","rel","href","target","Boolean","window","location","hostname","match","store","createStore","combineReducers","reducers","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8d69b893.chunk.js","sourcesContent":["export const HOVER_CELL = 'board.HOVER_CELL';\r\nexport const ON_MOUSE_LEAVE = 'board.ON_MOUSE_LEAVE';\r\nexport const STORE_STYLES = 'board.STORE_STYLES';\r\nexport const SET_ITEM = 'board.SET_ITEM';\r\nexport const PLAY_AI_TURN = 'board.PLAY_AI_TURN';\r\nexport const NEW_GAME = 'board.NEW_GAME';","import React from 'react';\r\nimport { useDrag } from 'react-dnd'\r\nimport * as boardActions from '../_store/board/actions';\r\n\r\nconst Pawn = ({ children, rowIndex, style, cellIndex, data, context, activePlayer }) => {\r\n\r\n    //Making the pawn draggable using react hook from library\r\n    const [, drag] = useDrag({\r\n        item: { r: rowIndex, c: cellIndex, d: data, type: 'pawn' },\r\n        end: (item, monitor) => {\r\n            const dropResult = monitor.getDropResult()\r\n            if (item && dropResult) {\r\n                if (item.d === activePlayer)\r\n                    context.props.dispatch(boardActions.setPawn(item, dropResult)) //This sends the action to set the pawn in its new dropped position\r\n            }\r\n        },\r\n    })\r\n\r\n    return (\r\n        <div  ref={drag}\r\n              style={{\r\n              width:\"50px\",\r\n              height:\"50px\",\r\n              margin:\"auto\",\r\n              borderRadius:\"50px\",\r\n              cursor:\"pointer\",\r\n              position:\"relative\",\r\n              backgroundColor: style['color'],\r\n              zIndex: 100,\r\n              opacity: style['opacity']}}> \r\n        </div>)\r\n}\r\n\r\nexport default Pawn","import * as types from './actionTypes';\r\n\r\n\r\nexport function onHover(r, c, data) {\r\n    return (dispatch => {\r\n        dispatch({ type: types.HOVER_CELL, r, c, data });\r\n    });\r\n}\r\n\r\nexport function onMouseLeave(r, c, data) {\r\n    return (dispatch => {\r\n        dispatch({ type: types.ON_MOUSE_LEAVE, r, c, data });\r\n    });\r\n}\r\n\r\nexport function ai(board) {\r\n    return (dispatch => {\r\n        dispatch({ type: types.PLAY_AI_TURN, board });\r\n    });\r\n}\r\n\r\nexport function setPawn(item, dropResult) {\r\n    return (dispatch => {\r\n        dispatch({ type: types.SET_ITEM, item, dropResult });\r\n    });\r\n}\r\n\r\nexport function resetGame() {\r\n    return (dispatch => {\r\n        dispatch({ type: types.STORE_STYLES });\r\n        dispatch({ type: types.NEW_GAME });\r\n\r\n    });\r\n}\r\n\r\nexport function storeStyles(board, player) {\r\n    return (dispatch => {\r\n        dispatch({ type: types.STORE_STYLES });\r\n    });\r\n}","import React from 'react';\r\nimport { useDrop } from 'react-dnd'\r\nimport Pawn from '../Pawn/Pawn';\r\nimport './Cell.css';\r\n\r\nconst Cell = ({ children, rowIndex, cellIndex, cellData, cellStyles, activePlayer, board, onMouseOver, onMouseLeave, context }) => {\r\n\r\n\r\n    //Dnd Hook used to make the cell Droppable, accepts 'pawn' only\r\n    const [, drop] = useDrop({\r\n        accept: 'pawn',\r\n        drop: () => ({ name: 'Cell', rowIndex, cellIndex, cellData }),\r\n    })\r\n\r\n    //If cell has data render a pawn for it\r\n    let hasPawn = null\r\n    if (cellData !== \"\")\r\n        hasPawn = <Pawn\r\n\t\t\t\t\tactivePlayer={activePlayer} \r\n\t\t\t\t\tcontext={context}\r\n\t\t\t\t\tstyle={cellStyles[String(rowIndex) + cellIndex]} \r\n\t\t\t\t\trowIndex={rowIndex} \r\n\t\t\t\t\tcellIndex={cellIndex} \r\n\t\t\t\t\tdata={cellData}>{cellData}\r\n\t\t\t\t  </Pawn>\r\n\r\n    return (\r\n        <div\r\n        \tref = { drop }\r\n\t\t\tclassName={'cell'}\t\t\r\n\t\t\tonMouseOver={onMouseOver}\r\n\t\t\tonMouseLeave={onMouseLeave}\r\n\t\t\tstyle={{ backgroundColor: cellStyles[String(rowIndex) + cellIndex].backgroundColor }} >\r\n\t\t\t{hasPawn}\r\n\t\t</div>\r\n    )\r\n};\r\n\r\nexport default (Cell)","import * as types from './actionTypes';\r\n\r\nconst initialBoard = [\r\n    ['o', '', 'o', '', 'o', '', 'o', ''],\r\n    ['', 'o', '', 'o', '', 'o', '', 'o'],\r\n    ['o', '', 'o', '', 'o', '', 'o', ''],\r\n    ['', '', '', '', '', '', '', ''],\r\n    ['', '', '', '', '', '', '', ''],\r\n    ['', 'x', '', 'x', '', 'x', '', 'x'],\r\n    ['x', '', 'x', '', 'x', '', 'x', ''],\r\n    ['', 'x', '', 'x', '', 'x', '', 'x']\r\n];\r\n\r\nconst initialState = {\r\n    time: 0,\r\n    board: initialBoard,\r\n    activePlayer: 'x',\r\n    highlightedMoves: [],\r\n    styles: {},\r\n    gameEnd: false,\r\n    moves: 0\r\n}\r\n\r\nexport default function reduce(state = initialState, action = {}) {\r\n    switch (action.type) {\r\n\r\n        case types.NEW_GAME:\r\n            let styles_reset = getCellStyles({\r\n                board: {\r\n                    board: [\r\n                        ['o', '', 'o', '', 'o', '', 'o', ''],\r\n                        ['', 'o', '', 'o', '', 'o', '', 'o'],\r\n                        ['o', '', 'o', '', 'o', '', 'o', ''],\r\n                        ['', '', '', '', '', '', '', ''],\r\n                        ['', '', '', '', '', '', '', ''],\r\n                        ['', 'x', '', 'x', '', 'x', '', 'x'],\r\n                        ['x', '', 'x', '', 'x', '', 'x', ''],\r\n                        ['', 'x', '', 'x', '', 'x', '', 'x']\r\n                    ],\r\n                    activePlayer: 'x',\r\n                    highlightedMoves: [],\r\n                    styles: {},\r\n                    gameEnd: false,\r\n                    moves: 0\r\n                }\r\n            });\r\n            return {\r\n                board: [\r\n                    ['o', '', 'o', '', 'o', '', 'o', ''],\r\n                    ['', 'o', '', 'o', '', 'o', '', 'o'],\r\n                    ['o', '', 'o', '', 'o', '', 'o', ''],\r\n                    ['', '', '', '', '', '', '', ''],\r\n                    ['', '', '', '', '', '', '', ''],\r\n                    ['', 'x', '', 'x', '', 'x', '', 'x'],\r\n                    ['x', '', 'x', '', 'x', '', 'x', ''],\r\n                    ['', 'x', '', 'x', '', 'x', '', 'x']\r\n                ],\r\n                activePlayer: 'x',\r\n                highlightedMoves: [],\r\n                styles: styles_reset,\r\n                gameEnd: false,\r\n                moves: 0\r\n            }\r\n\r\n        case types.HOVER_CELL:\r\n            let stylesC = { ...state.styles };\r\n            let validMoves = highlightValidMovesForPiece(action.r, action.c, action.data, state.board, state.activePlayer)\r\n\r\n            validMoves.forEach(item => {\r\n                stylesC[String(item[0]) + item[1]] = {\r\n                    ...stylesC[String(item[0]) + item[1]],\r\n                    backgroundColor: '#98FB98'\r\n                }\r\n            })\r\n\r\n            return {\r\n                ...state,\r\n                highlightedMoves: validMoves,\r\n                styles: stylesC,\r\n            }\r\n\r\n        case types.ON_MOUSE_LEAVE:\r\n            let styles_leave = { ...state.styles };\r\n            styles_leave = clearHighlightedCells(state.highlightedMoves, styles_leave, action.data)\r\n\r\n            return {\r\n                ...state,\r\n                highlightedMoves: [],\r\n                styles: styles_leave\r\n            }\r\n\r\n        case types.STORE_STYLES:\r\n            let styles = getCellStyles({ board: { ...state } });\r\n            return {\r\n                ...state,\r\n                styles: styles,\r\n            }\r\n\r\n        case types.PLAY_AI_TURN:\r\n\r\n            let active = 'x'\r\n            let new_styles = {}\r\n            let ai_pawns = []\r\n            let pastBoard = action.board\r\n            let gameEnd = state.gameEnd\r\n\r\n            //Get all moves for all ai pawns\r\n            pastBoard.forEach((row, rowIndex) => {\r\n                row.forEach((cell, cellIndex) => {\r\n                    let possibleMove = highlightValidMovesForPiece(rowIndex, cellIndex, pastBoard[rowIndex][cellIndex], pastBoard, 'o')\r\n                    if (pastBoard[rowIndex][cellIndex] === 'o' && (possibleMove.length > 0))\r\n                        ai_pawns.push([rowIndex, cellIndex, possibleMove]);\r\n                })\r\n            })\r\n\r\n            if (ai_pawns.length === 0)\r\n                gameEnd = true\r\n\r\n            //Select random AI pawn\r\n            // TODO - P1 : Killer mode - pick up pawn which will kill max opponent pawns\r\n            let randomSelectedAIPawn = ai_pawns[Math.floor(Math.random() * ai_pawns.length)];\r\n\r\n            if (randomSelectedAIPawn !== undefined) {\r\n\r\n                //Select random move for the Pawn\r\n                //TODO - P2 : Killer mode - pick move by checking length of element 3 in the array\r\n                let randomSelectedAIMove = randomSelectedAIPawn[2][Math.floor(Math.random() * randomSelectedAIPawn[2].length)]\r\n\r\n\r\n                //Killing the opponents \r\n                randomSelectedAIMove[2].forEach((item, index) => {\r\n                    if (index % 2 !== 0) return\r\n                    pastBoard[item][randomSelectedAIMove[2][index + 1]] = \"\"\r\n                })\r\n\r\n                //moving the piece\r\n                pastBoard[randomSelectedAIMove[0]][randomSelectedAIMove[1]] = pastBoard[randomSelectedAIPawn[0]][randomSelectedAIPawn[1]]\r\n                pastBoard[randomSelectedAIPawn[0]][randomSelectedAIPawn[1]] = \"\"\r\n            } else {\r\n                gameEnd = true\r\n            }\r\n\r\n            //Check if human player has any valid moves available, if not game end sequence\r\n            let hasMoveAvailable = []\r\n            pastBoard.forEach((row, rowIndex) => {\r\n                row.forEach((cell, cellIndex) => {\r\n                    let possibleMove = highlightValidMovesForPiece(rowIndex, cellIndex, pastBoard[rowIndex][cellIndex], pastBoard, 'x')\r\n                    if (pastBoard[rowIndex][cellIndex] === 'x' && (possibleMove.length > 0))\r\n                        hasMoveAvailable.push([rowIndex, cellIndex, possibleMove]);\r\n                })\r\n            })\r\n\r\n            if (hasMoveAvailable.length === 0)\r\n                gameEnd = true\r\n            let randomSelectedPlayerPawn = hasMoveAvailable[Math.floor(Math.random() * hasMoveAvailable.length)];\r\n            if (randomSelectedPlayerPawn === undefined)\r\n                gameEnd = true\r\n\r\n            new_styles = calculateStyles(pastBoard, active)\r\n\r\n\r\n            return {\r\n                ...state,\r\n                highlightedMoves: [],\r\n                styles: new_styles,\r\n                activePlayer: active,\r\n                gameEnd: gameEnd,\r\n                moves: gameEnd ? state.moves : state.moves + 1\r\n            }\r\n\r\n        case types.SET_ITEM:\r\n            let activeNew = state.activePlayer === 'x' ? 'o' : 'x'\r\n            let new_styles_new = {}\r\n            let oldBoard = state.board\r\n\r\n            //Check if the dropping destination matches the valid moves for the current dragging cell\r\n            let found = state.highlightedMoves.find((item) => {\r\n                return (item[0] === action.dropResult.rowIndex && item[1] === action.dropResult.cellIndex)\r\n            })\r\n\r\n            //If valid drop - delete jumped ai pawns and move piece\r\n            if (state.highlightedMoves !== [] && found !== undefined) {\r\n                found[2].forEach((item, index) => {\r\n                    if (index % 2 !== 0) return\r\n                    oldBoard[item][found[2][index + 1]] = \"\"\r\n                })\r\n                oldBoard[action.dropResult.rowIndex][action.dropResult.cellIndex] = oldBoard[action.item.r][action.item.c]\r\n                oldBoard[action.item.r][action.item.c] = \"\"\r\n                new_styles_new = calculateStyles(oldBoard, activeNew)\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                }\r\n            }\r\n\r\n\r\n            return {\r\n                ...state,\r\n                board: oldBoard,\r\n                highlightedMoves: [],\r\n                styles: new_styles_new,\r\n                activePlayer: activeNew,\r\n                gameEnd: false,\r\n                moves: state.moves + 1\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\n/* Internal Functions */\r\n\r\nfunction clearHighlightedCells(highlightedMovesArray, styles, data) {\r\n    highlightedMovesArray.forEach(item => {\r\n        styles[String(item[0]) + item[1]] = {\r\n            ...styles[String(item[0]) + item[1]],\r\n            backgroundColor: getBackgroundColor(item[0], item[1], data)\r\n        }\r\n    });\r\n\r\n    return styles\r\n}\r\n\r\nfunction calculateStyles(board, activePlayer) {\r\n    let styles = {}\r\n    board.forEach((row, rowindex) => {\r\n        row.forEach((cell, cellIndex) => {\r\n            let data = board[rowindex][cellIndex]\r\n            let color = getColor(rowindex, cellIndex, data)\r\n            let backgroundColor = getBackgroundColor(rowindex, cellIndex, data)\r\n            let opacity = getOpacity(rowindex, cellIndex, activePlayer, data)\r\n            let cursor = getCursor(rowindex, cellIndex, data)\r\n\r\n            styles[String(rowindex) + cellIndex] = {\r\n                color: color,\r\n                backgroundColor: backgroundColor,\r\n                opacity: opacity,\r\n                cursor: cursor\r\n            }\r\n\r\n        })\r\n    })\r\n    return styles\r\n}\r\n\r\n\r\n/* \r\nPrimary function to look for valid cells to move a hovered pawn\r\nr: rowIndex\r\nc: columnIndex\r\ndata: actual contents of the cell\r\nboard: state of board at that time\r\nactivePlayer: shows current active player - informs the direction of play (ex: if AI is active, downward play denoted by \"1\")\r\n\r\nReturns array of possible moves with each element having format : \r\n1. rowIndex of destination \r\n2. columnIndex of destination\r\n3. Array of elements to delete if the jump is made [r1, c1, r2, c2, .... , rN, cN]\r\n*/\r\n\r\nfunction highlightValidMovesForPiece(r, c, data, board, activePlayer) {\r\n    let validMoves = [];\r\n    let direction = [];\r\n    let leftAndRight = [1, -1];\r\n    let jumpMoves = []\r\n    let jump = false\r\n\r\n    if (activePlayer === 'x')\r\n        direction.push(-1);\r\n    else\r\n        direction.push(1);\r\n\r\n    direction.forEach(dir => {\r\n        leftAndRight.forEach(hor => {\r\n            if (isOnBoardAndValid([r + dir, c + hor], board, activePlayer)) {\r\n                if (board[r + dir][c + hor] === '')\r\n                    validMoves.push([r + dir, c + hor, []])\r\n                else if (board[r + dir][c + hor] !== activePlayer) {\r\n                    if (isOnBoardAndValid([r + (2 * dir), c + (2 * hor)], board, activePlayer) && board[r + (2 * dir)][c + (2 * hor)] === '') {\r\n                        validMoves.push([r + (2 * dir), c + (2 * hor), [r + dir, c + hor]])\r\n                        jump = true\r\n                        validMoves.push(...jumpLookup(leftAndRight, [r + dir, c + hor], board, activePlayer, dir, hor, board[r + (2 * dir)][c + (2 * hor)], r + (2 * dir), c + (2 * hor), jumpMoves))\r\n                    }\r\n\r\n                }\r\n            }\r\n\r\n        })\r\n    })\r\n\r\n\r\n    //This is to check if a jump is possible from the given pawn cell - if yes remove all non-jump moves \r\n    if (jump) {\r\n        validMoves = validMoves.filter(function(value, index, arr) {\r\n            return value[2].length > 0;\r\n        });\r\n    }\r\n\r\n    return validMoves\r\n}\r\n\r\n\r\n/*\r\nThis is the secondary function to recursively find further jumps once a jump is detected\r\nReturn an array with each element of format: \r\n1. rowIndex of destination of consecutive jumps\r\n2. columnIndex of destination of consecutive jumps\r\n3. Array of elements to delete if the jump is made [r1, c1, r2, c2, .... , rN, cN]\r\n*/\r\nfunction jumpLookup(leftAndRight, wouldDelete, board, activePlayer, direction, horizontal, odldata, newR, newC, jumping) {\r\n    leftAndRight.forEach(hor => {\r\n        if (isOnBoardAndValid([newR + direction, newC + hor], board, activePlayer)) {\r\n            if (board[newR + direction][newC + hor] !== activePlayer && board[newR + direction][newC + hor] !== \"\") {\r\n                if (isOnBoardAndValid([newR + (2 * direction), newC + (2 * hor)], board, activePlayer) && board[newR + (2 * direction)][newC + (2 * hor)] === '') {\r\n                    jumping.push([newR + (2 * direction), newC + (2 * hor), [...wouldDelete, newR + direction, newC + hor]])\r\n                    jumping.push(...jumpLookup(leftAndRight, [...wouldDelete, newR + direction, newC + hor], board, activePlayer, direction, horizontal, board[newR + (2 * direction)][newC + (2 * hor)], newR + (2 * direction), newC + (2 * hor), jumping))\r\n                }\r\n            }\r\n        }\r\n    })\r\n    return jumping\r\n}\r\n\r\n\r\n//Helper function to check if a cell locaiton is valid and part of the board\r\nfunction isOnBoardAndValid(xy, board, activePlayer) {\r\n    if (xy[0] < board.length && xy[0] > -1 && xy[1] > -1 && xy[1] < board[0].length)\r\n        return true\r\n    return false\r\n}\r\n\r\nfunction getColor(r, c, data) {\r\n    if (data === 'x')\r\n        return 'red';\r\n    if (data === 'o')\r\n        return 'DarkBlue';\r\n    return getBackgroundColor(r, c, data);\r\n}\r\n\r\nfunction getBackgroundColor(r, c, data) {\r\n    return (r + c) % 2 === 1 ? 'white' : '#eee'\r\n}\r\n\r\n//If player is not active decreses opactiy of pawn\r\nfunction getOpacity(r, c, activePlayer, data) {\r\n    if (data === activePlayer)\r\n        return 1\r\n    else\r\n        return 0.3\r\n}\r\n\r\nfunction getCursor(r, c, data) {\r\n    return data !== '' ? 'pointer' : ''\r\n}\r\n\r\n\r\n\r\n/* External Functions */\r\n\r\n\r\nexport function getCellStyles(state) {\r\n    const board = state.board.board;\r\n    const activePlayer = state.board.activePlayer;\r\n    let styles = state.board.styles;\r\n    if (Object.keys(styles).length > 0)\r\n        return styles\r\n\r\n    if (board !== undefined && board.length > 0)\r\n        styles = calculateStyles(board, activePlayer)\r\n    return styles;\r\n}\r\n\r\nexport function getBoardState(state) {\r\n    const board = state.board.board;\r\n    return board;\r\n}\r\n\r\n\r\n//Once game end is detected  - this function finds the codition for game end based on board state\r\nexport function getGameEndStatus(state) {\r\n    let gameEnd = state.board.gameEnd;\r\n    const board = state.board.board;\r\n    if (gameEnd) {\r\n        let hasRed = false\r\n        let hasBlack = false\r\n        board.forEach(row => {\r\n            row.forEach(cell => {\r\n                if (cell === 'x')\r\n                    hasRed = true\r\n                if (cell === 'o')\r\n                    hasBlack = true\r\n            })\r\n        })\r\n        if (hasRed && hasBlack)\r\n            gameEnd = \"It's a draw!\"\r\n        else if (hasRed && !hasBlack)\r\n            gameEnd = \"You Win!\"\r\n        else\r\n            gameEnd = 'AI Wins!'\r\n    }\r\n    return gameEnd;\r\n}\r\n\r\nexport function getActivePlayer(state) {\r\n    const activePlayer = state.board.activePlayer;\r\n    return activePlayer;\r\n}\r\n\r\nexport function getMoves(state) {\r\n    const moves = state.board.moves;\r\n    return moves;\r\n}\r\n\r\nexport function getCount(state, data) {\r\n    const board = state.board.board;\r\n    let count = 0\r\n    if (board)\r\n        board.forEach(row => {\r\n            row.forEach(item => {\r\n                if (item === data)\r\n                    count++\r\n            })\r\n        })\r\n    return count;\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Cell from '../Cell/Cell'\r\nimport './Row.css';\r\nimport * as boardSelector from '../_store/board/reducer';\r\nimport * as boardActions from '../_store/board/actions';\r\n\r\n/*\r\nDraws each row for the game board \r\n*/\r\n\r\nclass Row extends Component {\r\n    render() {\r\n        const { board, activePlayer, cellStyles, rowIndex } = this.props\r\n        return (\r\n            <div className=\"row\">\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.props.rowData.map(function(cellData, cellIndex) {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<Cell \r\n\t\t\t\t\t\t\t\tboard={board}\r\n\t\t\t\t\t\t\t\tactivePlayer={activePlayer}\r\n\t\t\t\t\t\t\t\tcellStyles={cellStyles}\r\n\t\t\t\t\t\t\t\trowIndex={rowIndex} \r\n\t\t\t\t\t\t\t\tkey={String(rowIndex) + cellIndex} \r\n\t\t\t\t\t\t\t\tcellIndex={cellIndex} \r\n\t\t\t\t\t\t\t\tcellData={cellData}\r\n\r\n\t\t\t\t\t\t\t\t//For Valid Cell Highlights\r\n\t\t\t\t\t\t\t\tonMouseOver={() => { \r\n\t\t\t\t\t\t\t\t\tif(board[rowIndex][cellIndex] === activePlayer)\r\n\t\t\t\t\t\t\t\t\t\tthis.props.dispatch(boardActions.onHover(rowIndex, cellIndex, board[rowIndex][cellIndex]));\r\n\t\t\t\t\t\t\t\t}}\r\n\r\n\t\t\t\t\t\t\t\t//For discarding highlighted cells\r\n\t\t\t\t\t\t\t\tonMouseLeave={() => {\r\n\t\t\t\t\t\t\t\t\tif(board[rowIndex][cellIndex] === activePlayer)\r\n\t\t\t\t\t\t\t\t\t\tthis.props.dispatch(boardActions.onMouseLeave(rowIndex, cellIndex, board[rowIndex][cellIndex]));\r\n\t\t\t\t\t\t\t\t}}\r\n\r\n\t\t\t\t\t\t\t\t//Pass context for DnD children\r\n\t\t\t\t\t\t\t\tcontext={this}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t}, this)\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: boardSelector.getBoardState(state),\r\n        activePlayer: boardSelector.getActivePlayer(state),\r\n        cellStyles: boardSelector.getCellStyles(state),\r\n        gameEnd: boardSelector.getGameEndStatus(state)\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(Row)","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './Board.css';\r\nimport Row from '../Row/Row';\r\nimport * as boardActions from '../_store/board/actions';\r\nimport * as boardSelector from '../_store/board/reducer';\r\n\r\nclass Board extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.dispatch(boardActions.storeStyles());\r\n    }\r\n\r\n    render() {\r\n\r\n        //If its AI's turn - play it.\r\n        // TODO: Add AI levels\r\n        if (this.props.activePlayer === 'o')\r\n            this.props.dispatch(boardActions.ai(this.props.board))\r\n\r\n        return (\r\n            <div className=\"board-box\">\r\n   \t\t\t\t<div className={\"board\"}>\r\n\t        \t\t{this.props.board.map((rowData, rowIndex) => <Row key={rowIndex} rowIndex={rowIndex} rowData={rowData}/>)}\r\n        \t\t</div>\r\n        \t</div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: boardSelector.getBoardState(state),\r\n        activePlayer: boardSelector.getActivePlayer(state),\r\n        gameEnd: boardSelector.getGameEndStatus(state)\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(Board)","import React, { Component } from 'react';\r\nimport './Game.css';\r\nimport Board from \"../Board/Board\";\r\nimport { connect } from 'react-redux';\r\nimport { DndProvider } from 'react-dnd';\r\nimport * as boardSelector from '../_store/board/reducer';\r\nimport * as boardActions from '../_store/board/actions';\r\nimport HTML5Backend from 'react-dnd-html5-backend';\r\n\r\n/* Class to render the game screen along with Stats */\r\nclass Game extends Component {\r\n\r\n    state = {\r\n        timer: null,\r\n        counter: 0\r\n    };\r\n\r\n    componentDidMount() {\r\n        let timer = setInterval(this.tick, 1000);\r\n        this.setState({ timer });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.state.timer);\r\n    }\r\n\r\n    componentDidUpdate(nextProps) {\r\n\r\n        //On detecting new game start, resetting the timer\r\n        if (nextProps.gameEnd !== this.props.gameEnd) {\r\n            clearInterval(this.state.timer);\r\n            this.setState({ timer: null })\r\n            let timer = setInterval(this.tick, 1000);\r\n            this.setState({ timer });\r\n        }\r\n    }\r\n\r\n    //Display seconds as hh:mm \r\n    /* TODO: range from 00:00 to 59:59 */\r\n    formatSeconds = (sec) => {\r\n        let hrs = Math.floor(sec / 3600);\r\n        let min = Math.floor((sec - (hrs * 3600)) / 60);\r\n        let seconds = sec - (hrs * 3600) - (min * 60);\r\n        seconds = Math.round(seconds * 100) / 100\r\n\r\n        let result = (min < 10 ? \"0\" + min : min);\r\n        result += \":\" + (seconds < 10 ? \"0\" + seconds : seconds);\r\n        return result;\r\n    }\r\n\r\n    tick = () => {\r\n        this.setState({\r\n            counter: this.state.counter + 1\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let gameEndStatus = \"Checkers-React\"\r\n\r\n        //If game ends stop timer and display the result\r\n        if (this.props.gameEnd) {\r\n            gameEndStatus = this.props.gameEnd\r\n            clearInterval(this.state.timer)\r\n        }\r\n\r\n        return (\r\n            <div className=\"Game\">\r\n\t\t        <header className=\"Game-header\">\r\n\r\n\t\t        \t{/* A Drag and Drop Library Provider \r\n\t\t\t\t\t\tTODO: Increase from Web to Touch screens\r\n\t\t        \t*/}\r\n\t\t\t        <DndProvider backend={HTML5Backend}> \r\n\t\t\t          \t<div className={\"Stats\"}>\r\n\t\t\t          \t\t<h1>{gameEndStatus}</h1>\r\n\t\t\t          \t\t<div className={\"Info\"}>{\"Moves played : \" + this.props.moves}</div>\r\n\t\t\t          \t\t<div style={{float: 'left'}}>\r\n\t\t\t          \t\t\t<div className={\"Info\"}>{\"Timer : \" + this.formatSeconds(this.state.counter)}</div>\r\n\t\t\t          \t\t</div>\r\n\t\t\t          \t\t<div style={{float: 'right'}}>\r\n\t\t\t          \t\t\t<button className={\"NewGameButton\"} onClick={() => {\r\n\t\t\t          \t\t\t\tthis.setState({timer: null, counter: 0});\r\n\t\t\t          \t\t\t\tthis.props.dispatch(boardActions.resetGame()) }}>New Game</button>\r\n\t\t\t          \t\t</div>\r\n\t\t\t          \t</div>\r\n\r\n\t\t\t            <Board />\r\n\t\t\t            \r\n\t\t\t            <div className={\"Stats\"}>\r\n\t\t\t          \t\t<div style={{float: 'left'}}>\r\n\t\t\t          \t\t\t<div className={\"Info\"}>{\"AI Pawns : \" + this.props.aiPawnCount}</div>\r\n\t\t\t          \t\t</div>\r\n\t\t\t          \t\t<div style={{float: 'right'}}>\r\n\t\t\t          \t\t\t<div className={\"Info\"}>{\"Your Pawns : \"  + this.props.yourPawnCount}</div>\r\n\t\t\t          \t\t</div>\r\n\t\t\t          \t\t<a rel=\"noopener noreferrer\" href = \"https://github.com/shivamgupta94/checkers-react\" target=\"_blank\" className=\"NewGameButton\">{\" View on Github\"}</a>\r\n\r\n\t\t\t          \t</div>\r\n\t\t\t        </DndProvider>\r\n\t\t        </header>\r\n\t\t    </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: boardSelector.getBoardState(state),\r\n        activePlayer: boardSelector.getActivePlayer(state),\r\n        gameEnd: boardSelector.getGameEndStatus(state),\r\n        aiPawnCount: boardSelector.getCount(state, 'o'),\r\n        yourPawnCount: boardSelector.getCount(state, 'x'),\r\n        moves: boardSelector.getMoves(state),\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(Game);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport './index.css';\nimport Game from './Game/Game';\nimport * as serviceWorker from './serviceWorker';\nimport * as reducers from './_store/reducers';\nconst store = createStore(combineReducers(reducers), applyMiddleware(thunk));\n\nReactDOM.render(\n    <Provider store={store}>\n\t\t<Game />\n\t</Provider>,\n    document.getElementById('root'));\nserviceWorker.unregister();"],"sourceRoot":""}